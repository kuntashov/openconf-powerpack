/**
 * property Caption as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Заголовок элемента управления
 */

print("Проверка получения свойства Caption: " + assign(ctl.Caption=="Ok"));

ctl.Caption = "Button 1";
print("Проверка установки свойства Caption: " + assign(ctl.Caption=="Button 1"));

/**
 * property Type as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Тип элемента управления
 */

print("Проверка получения свойства Type: " + assign(ctl.Type=="BUTTON"));

// DEPRICATED!!!
//ctl.Type= "";
//print("Проверка установки свойства Type: " + assign(ctl.Type==""));

/**
 * property Flags1 as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Набор дополнительных флагов элемента управления
 */

//print("Проверка получения свойства Flags1: " + assign(ctl.Flags1==""));

//ctl.Flags1= "";
//print("Проверка установки свойства Flags1: " + assign(ctl.Flags1==""));

/**
 * property X as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Координата X
 */

print("Проверка получения свойства X: " + assign(ctl.X=="69"));

ctl.X= "100";
print("Проверка установки свойства X: " + assign(ctl.X=="100"));

/**
 * property Y as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Координата Y
 */

print("Проверка получения свойства Y: " + assign(ctl.Y=="90"));

ctl.Y= "40";
print("Проверка установки свойства Y: " + assign(ctl.Y=="40"));

/**
 * property Width as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Ширина элемента управления
 */

print("Проверка получения свойства Width: " + assign(ctl.Width=="39"));

ctl.Width= "50";
print("Проверка установки свойства Width: " + assign(ctl.Width=="50"));

/**
 * property Height as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Высота элемента управления
 */

print("Проверка получения свойства Height: " + assign(ctl.Height=="13"));

ctl.Height= "20";
print("Проверка установки свойства Height: " + assign(ctl.Height=="20"));

/**
 * property Associated as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Признак привязки к реквизиту объекта конфишурации (1-привязан, 2 - нет)
 */

//print("Проверка получения свойства Associated: " + assign(ctl.Associated==""));

//ctl.Associated= "";
//print("Проверка установки свойства Associated: " + assign(ctl.Associated==""));

/**
 * property TabOrder as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Порядок обхода
 */

//print("Проверка получения свойства TabOrder: " + assign(ctl.TabOrder==""));

//ctl.TabOrder= "";
//print("Проверка установки свойства TabOrder: " + assign(ctl.TabOrder==""));

/**
 * property Action as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Формула
 */

//print("Проверка получения свойства Action: " + assign(ctl.Action==""));

//ctl.Action= "";
//print("Проверка установки свойства Action: " + assign(ctl.Action==""));

/**
 * property Name as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Идентификатор элемента управления
 */

//print("Проверка получения свойства Name: " + assign(ctl.Name==""));

//ctl.Name= "";
//print("Проверка установки свойства Name: " + assign(ctl.Name==""));

/**
 * property ObjAttribId as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Идентификатор реквизита объекта, к которому привязан реквизит
 */

//print("Проверка получения свойства ObjAttribId: " + assign(ctl.ObjAttribId==""));

//ctl.ObjAttribId= "";
//print("Проверка установки свойства ObjAttribId: " + assign(ctl.ObjAttribId==""));

/**
 * property ValueType as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Идентификатор типа значения
 */

//print("Проверка получения свойства ValueType: " + assign(ctl.ValueType==""));

//ctl.ValueType= "";
//print("Проверка установки свойства ValueType: " + assign(ctl.ValueType==""));

/**
 * property ValueLength as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Длина значения
 */

//print("Проверка получения свойства ValueLength: " + assign(ctl.ValueLength==""));

//ctl.ValueLength= "";
//print("Проверка установки свойства ValueLength: " + assign(ctl.ValueLength==""));

/**
 * property ValuePrecision as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Точность значения
 */

//print("Проверка получения свойства ValuePrecision: " + assign(ctl.ValuePrecision==""));

//ctl.ValuePrecision= "";
//print("Проверка установки свойства ValuePrecision: " + assign(ctl.ValuePrecision==""));

/**
 * property ValueKind as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Идентификатор вида значения
 */

//print("Проверка получения свойства ValueKind: " + assign(ctl.ValueKind==""));

//ctl.ValueKind= "";
//print("Проверка установки свойства ValueKind: " + assign(ctl.ValueKind==""));

/**
 * property ValueFlags as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Набор двух флагов - "Не отрицательный" и "Разделять на триады"
 */

//print("Проверка получения свойства ValueFlags: " + assign(ctl.ValueFlags==""));

//ctl.ValueFlags= "";
//print("Проверка установки свойства ValueFlags: " + assign(ctl.ValueFlags==""));

/**
 * property Flags2 as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Основной набор флагов
 */

//print("Проверка получения свойства Flags2: " + assign(ctl.Flags2==""));

//ctl.Flags2= "";
//print("Проверка установки свойства Flags2: " + assign(ctl.Flags2==""));

/**
 * property Description as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Пользовательское описание элемента управления
 */

//print("Проверка получения свойства Description: " + assign(ctl.Description==""));

//ctl.Description= "";
//print("Проверка установки свойства Description: " + assign(ctl.Description==""));

/**
 * property Hint as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Подсказка для пользователя
 */

//print("Проверка получения свойства Hint: " + assign(ctl.Hint==""));

//ctl.Hint= "";
//print("Проверка установки свойства Hint: " + assign(ctl.Hint==""));

/**
 * property Font as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Шрифт элемента управления
 */

//print("Проверка получения свойства Font: " + assign(ctl.Font==""));

//ctl.Font= "";
//print("Проверка установки свойства Font: " + assign(ctl.Font==""));

/**
 * property PictureId as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Идентификатор картинки
 */

//print("Проверка получения свойства PictureId: " + assign(ctl.PictureId==""));

//ctl.PictureId= "";
//print("Проверка установки свойства PictureId: " + assign(ctl.PictureId==""));

/**
 * property Layer as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Слой, на котором располагается элемент управления
 */

//print("Проверка получения свойства Layer: " + assign(ctl.Layer==""));

//ctl.Layer= "";
//print("Проверка установки свойства Layer: " + assign(ctl.Layer==""));

/**
 * property HotKey as String, Read/Write
 *  Member of OpenConfDialogControl
 *      Горячая клавиша, ассоциированная с элементом управления
 */

//print("Проверка получения свойства HotKey: " + assign(ctl.HotKey==""));

//ctl.HotKey= "";
//print("Проверка установки свойства HotKey: " + assign(ctl.HotKey==""));
